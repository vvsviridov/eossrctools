#!/usr/bin/env python
# encoding: utf-8
'''
executor -- plan importing and provisioning

executor is a tool for dividing large OSS-RC XML plans
it makes importing, creating backup and provisioning

It defines classes_and_methods

@author:     atx@inbox.ru

@copyright:  2018 organization_name. All rights reserved.

@license:    license

@contact:    atx@inbox.ru
@deffield    updated: Updated
'''

import sys
import os
import subprocess
import shutil
import datetime

from optparse import OptionParser
from xml.sax import parse
from xml.sax.saxutils import XMLGenerator
from xml.sax.xmlreader import AttributesImpl

__all__ = []
__version__ = 0.1
__date__ = '2018-09-13'
__updated__ = '2018-09-13'

DEBUG = 0
TESTRUN = 0
PROFILE = 0
FILES = []
PARENT_CXC_NAME = "nms_umts_wran_bcg"
CXC_DIR = "/opt/ericsson/" + PARENT_CXC_NAME
CXC_BIN = CXC_DIR + "/bin/bcgtool.sh"
CXC_VAR = "/var" + CXC_DIR + "/files/"
CXC_IMP = CXC_VAR + "import/"
CXC_EXP = CXC_VAR + "export/"


class CycleFile(object):

    def __init__(self, filename):
        self.basename, self.ext = os.path.splitext(filename)
        self.index = 0
        self.open_next_file()

    def open_next_file(self):
        self.index += 1
        self.file = open(self.name(), 'w')

    def name(self):
        fname = '%s%s%s' % (self.basename, self.index, self.ext)
        FILES.append(fname)
        return fname

    def cycle(self):
        self.file.close()
        self.open_next_file()

    def write(self, strng):
        self.file.write(strng)

    def close(self):
        self.file.close()


class XMLBreaker(XMLGenerator):

    def __init__(self, break_into=None, break_after=1000, out=None, *args, **kwargs):
        XMLGenerator.__init__(self, out, encoding='utf-8', *args, **kwargs)
        self.out_file = out
        self.break_into = break_into
        self.break_after = break_after
        self.context = []
        self.count = 0
        self.attrs = None

    def startElement(self, name, attrs):
        XMLGenerator.startElement(self, name, attrs)
        self.context.append((name, attrs))
        if name == u'fileHeader':
            self.attrs = attrs

    def endElement(self, name):
        XMLGenerator.endElement(self, name)
        self.context.pop()
        if name == self.break_into:
            self.count += 1
            if self.count == self.break_after:
                self.count = 0
                for element in reversed(self.context):
                    self.out_file.write("\n")
                    XMLGenerator.endElement(self, element[0])
                    if element[0] == u'configData':
                        XMLGenerator.startElement(self, u'fileFooter', AttributesImpl({"dateTime": datetime.datetime.now().strftime('%Y-%m-%dT%I:%M:%SZ')}))
                        XMLGenerator.endElement(self, u'fileFooter')
                self.out_file.cycle()
                XMLGenerator.startDocument(self)
                for element in self.context:
                    XMLGenerator.startElement(self, *element)
                    if element[0] == u'bulkCmConfigDataFile':
                        XMLGenerator.startElement(self, u'fileHeader', AttributesImpl(self.attrs))
                        XMLGenerator.endElement(self, u'fileHeader')


def subprocess_cmd(command):
    return subprocess.Popen(command,stdout=subprocess.PIPE, shell=True).communicate()[0].strip()


def main(argv=None):
    '''Command line options.'''

    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''python executor.py --after 10 --node xn\:MeContext planname.xml''' # optional - give further explanation about what the program does
    program_license = "Copyright 2018 user_name (organization_name)                                            \
                Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"

    if argv is None:
        argv = sys.argv[1:]
    try:
        # setup option parser
        parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
        parser.add_option("-a", "--after", dest="after", help="set break after [default: %default]", metavar="AFTER")
        parser.add_option("-n", "--node", dest="node", help="set break node [default: %default]", metavar="NODE")

        # set defaults
        parser.set_defaults(after="1000", node="xn:MeContext")

        # process options
        (opts, args) = parser.parse_args(argv)  # @UnusedVariable

        # MAIN BODY #
        for filename in args:
            parse(filename, XMLBreaker(opts.node, int(opts.after), out=CycleFile(filename)))
        for fn in FILES:
            shutil.copy(fn, CXC_IMP)
            print subprocess_cmd(CXC_BIN + ' -i ' + fn + ' -p '+fn[:-4]+' -as plan -v')
            print subprocess_cmd(CXC_BIN + ' -u ' + fn[:-4] + ' -v')
            os.remove(CXC_IMP + fn)
            if raw_input("Activate plan?[y/n]: ") == 'y':
                print subprocess_cmd(CXC_BIN + ' -a '+fn[:-4]+' -v | tee '+fn[:-4]+'.rep')

    except Exception, e:
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2


if __name__ == "__main__":
    if DEBUG:
        sys.argv.append("-h")
    if TESTRUN:
        import doctest
        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = 'executor_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())
